[{"/Users/eadehemingway/Documents/CODING/tree/src/reportWebVitals.js":"1","/Users/eadehemingway/Documents/CODING/tree/src/App.js":"2","/Users/eadehemingway/Documents/CODING/tree/src/index.js":"3","/Users/eadehemingway/Documents/CODING/tree/src/Tree.js":"4","/Users/eadehemingway/Documents/CODING/tree/src/data.js":"5"},{"size":362,"mtime":1607453962146,"results":"6","hashOfConfig":"7"},{"size":531,"mtime":1607455218158,"results":"8","hashOfConfig":"7"},{"size":500,"mtime":1607453962146,"results":"9","hashOfConfig":"7"},{"size":3242,"mtime":1607457101250,"results":"10","hashOfConfig":"7"},{"size":1168,"mtime":1607454794336,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4rl1nr",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/eadehemingway/Documents/CODING/tree/src/reportWebVitals.js",[],"/Users/eadehemingway/Documents/CODING/tree/src/App.js",["23"],"/Users/eadehemingway/Documents/CODING/tree/src/index.js",[],"/Users/eadehemingway/Documents/CODING/tree/src/Tree.js",["24"],"import React, { useEffect } from 'react'\nimport * as d3 from 'd3'\n\nexport default function Tree({ data }) {\n  const padding = 11\n  const svgWidth = 700\n  const svgHeight = 500\n  useEffect(() => {\n    doInitialStuff()\n  }, [])\n  useEffect(() => {\n    updateTree()\n  }, [data])\n\n  function doInitialStuff() {\n    // do the stuff you only want to do once, in this case its not much\n    d3.select('svg').attr('width', svgWidth).attr('height', svgHeight)\n  }\n  function updateTree() {\n    const svg = d3.select('svg')\n    const treemap = d3.tree().size([500, svgHeight])\n    const nodes = treemap(d3.hierarchy(data, (d) => d.children))\n    const link = svg.selectAll('.link').data(nodes.descendants().slice(1)) // this cuts off the first node cos that doesnt have links going to it\n\n    // DRAW THE LINKS ===========================================================\n    const enteringLinks = link\n      .enter()\n      .append('path')\n      .attr('class', 'link')\n      .style('stroke', 'lightsteelblue')\n      .style('stroke-width', '2px')\n      .attr('fill', 'none')\n\n    const updatedLinkSelection = link.merge(enteringLinks)\n\n    updatedLinkSelection\n      .attr('transform', (d) => 'translate(' + padding + ',0)')\n      .attr('d', (d) => {\n        return (\n          'M' +\n          nodes.y +\n          ',' +\n          nodes.x +\n          'C' +\n          nodes.y / 2 +\n          ',' +\n          d.x +\n          ' ' +\n          nodes.y / 2 +\n          ',' +\n          nodes.x +\n          ' ' +\n          nodes.y +\n          ',' +\n          nodes.x\n        )\n      })\n      .transition()\n      .duration(1000)\n      .attr('d', (d) => {\n        return (\n          'M' +\n          d.y +\n          ',' +\n          d.x +\n          'C' +\n          (d.y + d.parent.y) / 2 +\n          ',' +\n          d.x +\n          ' ' +\n          (d.y + d.parent.y) / 2 +\n          ',' +\n          d.parent.x +\n          ' ' +\n          d.parent.y +\n          ',' +\n          d.parent.x\n        )\n      })\n\n    link.exit().remove()\n\n    // DRAW THE NODES ===========================================================\n    const nodeSelection = svg\n      .selectAll('.node-groups')\n      .data(nodes.descendants())\n\n    const enteringNodeGroups = nodeSelection\n      .enter()\n      .append('g')\n      .attr('class', 'node-groups')\n\n    enteringNodeGroups\n      .append('circle')\n      .attr('class', 'nodes-circles')\n      .attr('r', 10)\n      .style('stroke', 'red')\n      .style('fill', 'white')\n\n    enteringNodeGroups\n      .append('text')\n      .attr('dy', '.35em')\n      .attr('x', 20)\n      .attr('font-family', 'futura')\n      .attr('fill', 'lightslategray')\n\n    const updateNodeSelection = enteringNodeGroups.merge(nodeSelection)\n\n    updateNodeSelection\n      .attr(\n        'transform',\n        (d) => 'translate(' + (nodes.y + padding) + ',' + nodes.x + ')'\n      )\n      .transition()\n      .duration(1000)\n      .attr(\n        'transform',\n        (d) => 'translate(' + (d.y + padding) + ',' + d.x + ')'\n      )\n\n    updateNodeSelection.selectAll('text').text((d) => d.data.name)\n\n    nodeSelection.exit().remove()\n  }\n\n  return (\n    <section className=\"page-excl-nav\">\n      <h1 className=\"graph-title\"> Tree </h1>\n      <svg></svg>\n    </section>\n  )\n}\n","/Users/eadehemingway/Documents/CODING/tree/src/data.js",[],{"ruleId":"25","severity":1,"message":"26","line":1,"column":8,"nodeType":"27","messageId":"28","endLine":1,"endColumn":12},{"ruleId":"29","severity":1,"message":"30","line":13,"column":6,"nodeType":"31","endLine":13,"endColumn":12,"suggestions":"32"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateTree'. Either include it or remove the dependency array.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [data, updateTree]",{"range":"36","text":"37"},[268,274],"[data, updateTree]"]